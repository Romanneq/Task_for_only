{"name": "Поле name проходит валидацию при корректном заполнении", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <tests.test_field_name.TestFieldName object at 0x0000029A03D359A0>, web_driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"fc45504a9179ce548b0ea4a2c167b842\")>, name = 'Роман-Роман'\n\n    @allure.title('Поле name проходит валидацию при корректном заполнении')\n    @allure.description('Я выделил следующие, общепринятые позитивные проверки на валидацию поля name: строка '\n                        'с русскими буквами, с латинскими, с пробелом, строка с дефиз, количество символов - 2.')\n    @pytest.mark.parametrize('name', ['Роман', 'Roman', 'Роман Гороховик', 'Роман-Роман', 'Ро'])\n    # Для ревьюера: здесь я использую метод EC invisibility_of_element_located для проверки, что ошибка не отображается,\n    # аналогично делаю и для других полей. По поводу двойных имен это серая зона, я допустил возможным писать двойные\n    # имена через дефис, также не стал писать проверки на количество символов и граничных значений, чтобы не нагружать\n    # код.\n    # 1 тест с ошибкой, 4 проходят\n    def test_correct_field_name(self, web_driver, name):\n        main_page_obj = MainPage(web_driver)\n        main_page_obj.wait_main_page(FormsMainPage.FORM_YOUR_DATA)\n        main_page_obj._send_keys(FieldsMainPage.FIELD_NAME, name)\n        main_page_obj.click_elem_main_page(FormsMainPage.FORM_YOUR_DATA)\n>       err_vis = main_page_obj.wait_no_error_field(FieldsMainPage.FIELD_NAME_ERROR)\n\ntests\\test_field_name.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nmethods\\main_page_methods.py:20: in wait_no_error_field\n    return self.re_wait_element_page(locator)\nmethods\\base_methods.py:21: in re_wait_element_page\n    return WebDriverWait(self.driver, 10).until(expected_conditions.invisibility_of_element_located(locator))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"fc45504a9179ce548b0ea4a2c167b842\")>, method = <function invisibility_of_element_located.<locals>._predicate at 0x0000029A03D15D00>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "description": "Я выделил следующие, общепринятые позитивные проверки на валидацию поля name: строка с русскими буквами, с латинскими, с пробелом, строка с дефиз, количество символов - 2.", "steps": [{"name": "Метод отображения главной страницы сервиса", "status": "passed", "steps": [{"name": "Метод явного ожидания отображения элемента", "status": "passed", "parameters": [{"name": "locator", "value": "['xpath', \".//p[text()='Ваши контакты']\"]"}], "start": 1720284333290, "stop": 1720284333326}], "parameters": [{"name": "locator", "value": "['xpath', \".//p[text()='Ваши контакты']\"]"}], "start": 1720284333290, "stop": 1720284333326}, {"name": "Метод заполнения поля", "status": "passed", "steps": [{"name": "Метод ввода текста в поле элемента страницы", "status": "passed", "parameters": [{"name": "locator", "value": "['xpath', \".//input[@name = 'name']\"]"}, {"name": "text", "value": "'Роман-Роман'"}], "start": 1720284333326, "stop": 1720284333619}], "parameters": [{"name": "locator", "value": "['xpath', \".//input[@name = 'name']\"]"}, {"name": "text_name", "value": "'Роман-Роман'"}], "start": 1720284333326, "stop": 1720284333619}, {"name": "Метод клика по элементу главной страницы", "status": "passed", "steps": [{"name": "Метод клика по элементу страницы", "status": "passed", "parameters": [{"name": "locator", "value": "['xpath', \".//p[text()='Ваши контакты']\"]"}], "start": 1720284333619, "stop": 1720284333752}], "parameters": [{"name": "elem", "value": "['xpath', \".//p[text()='Ваши контакты']\"]"}], "start": 1720284333619, "stop": 1720284333752}, {"name": "Метод ожидания отсутствия ошибки в поле", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"C:\\Users\\romag\\PycharmProjects\\Task_for_only_1\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\romag\\PycharmProjects\\Task_for_only_1\\methods\\main_page_methods.py\", line 20, in wait_no_error_field\n    return self.re_wait_element_page(locator)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\romag\\PycharmProjects\\Task_for_only_1\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\romag\\PycharmProjects\\Task_for_only_1\\methods\\base_methods.py\", line 21, in re_wait_element_page\n    return WebDriverWait(self.driver, 10).until(expected_conditions.invisibility_of_element_located(locator))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\romag\\PycharmProjects\\Task_for_only_1\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "steps": [{"name": "Метод ожидания отсутствия элемента", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"C:\\Users\\romag\\PycharmProjects\\Task_for_only_1\\.venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\romag\\PycharmProjects\\Task_for_only_1\\methods\\base_methods.py\", line 21, in re_wait_element_page\n    return WebDriverWait(self.driver, 10).until(expected_conditions.invisibility_of_element_located(locator))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\romag\\PycharmProjects\\Task_for_only_1\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "parameters": [{"name": "locator", "value": "['xpath', './/form/div[1]/div/div[1]/div/input[@error]']"}], "start": 1720284333752, "stop": 1720284344228}], "parameters": [{"name": "locator", "value": "['xpath', './/form/div[1]/div/div[1]/div/input[@error]']"}], "start": 1720284333752, "stop": 1720284344228}], "parameters": [{"name": "name", "value": "'Роман-Роман'"}], "start": 1720284333290, "stop": 1720284344229, "uuid": "517bf609-a7b0-4bf0-a595-6349cf744302", "historyId": "9d76562e862206045bddd496ca543445", "testCaseId": "e0adc83d121dd16cbbafda09bd970456", "fullName": "tests.test_field_name.TestFieldName#test_correct_field_name", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_field_name"}, {"name": "subSuite", "value": "TestFieldName"}, {"name": "host", "value": "DESKTOP-USF6L0H"}, {"name": "thread", "value": "23104-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_field_name"}]}